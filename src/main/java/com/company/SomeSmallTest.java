  package com.company;

  import graphwalker.com.company.SmallTest;
  import org.graphwalker.core.machine.ExecutionContext;
  import org.graphwalker.java.annotation.GraphWalker;

/**
 * See: http://graphwalker.org/docs/maven_archetype for more details
 * <p/>
 * Implements the GraphWalker model: src/main/resources/SmallTest.graphml
 * The SmallTest.graphml can be opened and edited using http://www.yworks.com/en/products/yfiles/yed/
 * <p/>
 * For convenience, a jpg image exists side-by-side in the same folder.
 * <p/>
 * The @GraphWalker annotation, has the following meaning:
 * 1) value defines the generator of this test. Please read more
 * on the subject at: http://graphwalker.org/docs/path_generators_and_stop_conditions
 * 2) start defines the first element in the model to be executed. (Element is
 * either a vertex or an edge)
 * <p/>
 * The interface SmallTest, that SomeSmallTest implements, is generated by
 * running: mvn graphwalker:generate-sources
 * also: mvn graphwalker:test
 */
@GraphWalker(value = "random(edge_coverage(100))", start = "v_Off")
public class SomeSmallTest extends ExecutionContext implements SmallTest {

    @Override
    public void v_playSongRhythm() {
        System.out.println("Bam tss LA LA LA!");
    }

    @Override
    public void v_playRhythm() {
        System.out.println("Bam tss tss bam tss tss!!!");
    }

    @Override
    public void e_PlaySong() {
        System.out.println("Let's sing!");
    }

    @Override
    public void v_playSong() {
        System.out.println("La la la la!");
    }

    @Override
    public void v_Off() {
        System.out.println("zzz...");

    }

    @Override
    public void e_Off() {
        System.out.println("Shutting down...");

    }

    @Override
    public void e_PlayRhythm() {
        System.out.println("Let's make some noise!!");

    }

}
